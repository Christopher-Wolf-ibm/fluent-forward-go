package protocol

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *CompressedPackedForwardMessage) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	z.Tag, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Tag")
		return
	}
	z.CompressedEventStream, err = dc.ReadBytes(z.CompressedEventStream)
	if err != nil {
		err = msgp.WrapError(err, "CompressedEventStream")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Options")
			return
		}
		z.Options = nil
	} else {
		if z.Options == nil {
			z.Options = new(MessageOptions)
		}
		err = z.Options.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "Options")
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *CompressedPackedForwardMessage) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 3
	err = en.Append(0x93)
	if err != nil {
		return
	}
	err = en.WriteString(z.Tag)
	if err != nil {
		err = msgp.WrapError(err, "Tag")
		return
	}
	err = en.WriteBytes(z.CompressedEventStream)
	if err != nil {
		err = msgp.WrapError(err, "CompressedEventStream")
		return
	}
	if z.Options == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Options.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Options")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *CompressedPackedForwardMessage) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 3
	o = append(o, 0x93)
	o = msgp.AppendString(o, z.Tag)
	o = msgp.AppendBytes(o, z.CompressedEventStream)
	if z.Options == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Options.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Options")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CompressedPackedForwardMessage) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	z.Tag, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Tag")
		return
	}
	z.CompressedEventStream, bts, err = msgp.ReadBytesBytes(bts, z.CompressedEventStream)
	if err != nil {
		err = msgp.WrapError(err, "CompressedEventStream")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Options = nil
	} else {
		if z.Options == nil {
			z.Options = new(MessageOptions)
		}
		bts, err = z.Options.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "Options")
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CompressedPackedForwardMessage) Msgsize() (s int) {
	s = 1 + msgp.StringPrefixSize + len(z.Tag) + msgp.BytesPrefixSize + len(z.CompressedEventStream)
	if z.Options == nil {
		s += msgp.NilSize
	} else {
		s += z.Options.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Entry) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.Timestamp, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err, "Record")
		return
	}
	if z.Record == nil {
		z.Record = make(map[string]string, zb0002)
	} else if len(z.Record) > 0 {
		for key := range z.Record {
			delete(z.Record, key)
		}
	}
	for zb0002 > 0 {
		zb0002--
		var za0001 string
		var za0002 string
		za0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, "Record")
			return
		}
		za0002, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, "Record", za0001)
			return
		}
		z.Record[za0001] = za0002
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Entry) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Timestamp)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Record)))
	if err != nil {
		err = msgp.WrapError(err, "Record")
		return
	}
	for za0001, za0002 := range z.Record {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Record")
			return
		}
		err = en.WriteString(za0002)
		if err != nil {
			err = msgp.WrapError(err, "Record", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Entry) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendInt64(o, z.Timestamp)
	o = msgp.AppendMapHeader(o, uint32(len(z.Record)))
	for za0001, za0002 := range z.Record {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendString(o, za0002)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Entry) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.Timestamp, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Record")
		return
	}
	if z.Record == nil {
		z.Record = make(map[string]string, zb0002)
	} else if len(z.Record) > 0 {
		for key := range z.Record {
			delete(z.Record, key)
		}
	}
	for zb0002 > 0 {
		var za0001 string
		var za0002 string
		zb0002--
		za0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "Record")
			return
		}
		za0002, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "Record", za0001)
			return
		}
		z.Record[za0001] = za0002
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Entry) Msgsize() (s int) {
	s = 1 + msgp.Int64Size + msgp.MapHeaderSize
	if z.Record != nil {
		for za0001, za0002 := range z.Record {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.StringPrefixSize + len(za0002)
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *EntryExt) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	err = dc.ReadExtension(&z.Timestamp)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err, "Record")
		return
	}
	if z.Record == nil {
		z.Record = make(map[string]string, zb0002)
	} else if len(z.Record) > 0 {
		for key := range z.Record {
			delete(z.Record, key)
		}
	}
	for zb0002 > 0 {
		zb0002--
		var za0001 string
		var za0002 string
		za0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, "Record")
			return
		}
		za0002, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, "Record", za0001)
			return
		}
		z.Record[za0001] = za0002
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *EntryExt) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Timestamp)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Record)))
	if err != nil {
		err = msgp.WrapError(err, "Record")
		return
	}
	for za0001, za0002 := range z.Record {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Record")
			return
		}
		err = en.WriteString(za0002)
		if err != nil {
			err = msgp.WrapError(err, "Record", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *EntryExt) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o, err = msgp.AppendExtension(o, &z.Timestamp)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	o = msgp.AppendMapHeader(o, uint32(len(z.Record)))
	for za0001, za0002 := range z.Record {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendString(o, za0002)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EntryExt) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	bts, err = msgp.ReadExtensionBytes(bts, &z.Timestamp)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Record")
		return
	}
	if z.Record == nil {
		z.Record = make(map[string]string, zb0002)
	} else if len(z.Record) > 0 {
		for key := range z.Record {
			delete(z.Record, key)
		}
	}
	for zb0002 > 0 {
		var za0001 string
		var za0002 string
		zb0002--
		za0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "Record")
			return
		}
		za0002, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "Record", za0001)
			return
		}
		z.Record[za0001] = za0002
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *EntryExt) Msgsize() (s int) {
	s = 1 + msgp.ExtensionPrefixSize + z.Timestamp.Len() + msgp.MapHeaderSize
	if z.Record != nil {
		for za0001, za0002 := range z.Record {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.StringPrefixSize + len(za0002)
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *EntryList) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(EntryList, zb0002)
	}
	for zb0001 := range *z {
		err = (*z)[zb0001].DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z EntryList) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteArrayHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0003 := range z {
		err = z[zb0003].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, zb0003)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z EntryList) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(len(z)))
	for zb0003 := range z {
		o, err = z[zb0003].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, zb0003)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EntryList) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(EntryList, zb0002)
	}
	for zb0001 := range *z {
		bts, err = (*z)[zb0001].UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z EntryList) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for zb0003 := range z {
		s += z[zb0003].Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *EventTime) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Time":
			z.Time, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "Time")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z EventTime) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Time"
	err = en.Append(0x81, 0xa4, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteTime(z.Time)
	if err != nil {
		err = msgp.WrapError(err, "Time")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z EventTime) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Time"
	o = append(o, 0x81, 0xa4, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendTime(o, z.Time)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EventTime) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Time":
			z.Time, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Time")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z EventTime) Msgsize() (s int) {
	s = 1 + 5 + msgp.TimeSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ForwardMessage) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	z.Tag, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Tag")
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "Entries")
		return
	}
	if cap(z.Entries) >= int(zb0002) {
		z.Entries = (z.Entries)[:zb0002]
	} else {
		z.Entries = make([]EntryExt, zb0002)
	}
	for za0001 := range z.Entries {
		err = z.Entries[za0001].DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "Entries", za0001)
			return
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Options")
			return
		}
		z.Options = nil
	} else {
		if z.Options == nil {
			z.Options = new(MessageOptions)
		}
		err = z.Options.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "Options")
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ForwardMessage) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 3
	err = en.Append(0x93)
	if err != nil {
		return
	}
	err = en.WriteString(z.Tag)
	if err != nil {
		err = msgp.WrapError(err, "Tag")
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Entries)))
	if err != nil {
		err = msgp.WrapError(err, "Entries")
		return
	}
	for za0001 := range z.Entries {
		err = z.Entries[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Entries", za0001)
			return
		}
	}
	if z.Options == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Options.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Options")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ForwardMessage) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 3
	o = append(o, 0x93)
	o = msgp.AppendString(o, z.Tag)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Entries)))
	for za0001 := range z.Entries {
		o, err = z.Entries[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Entries", za0001)
			return
		}
	}
	if z.Options == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Options.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Options")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ForwardMessage) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	z.Tag, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Tag")
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Entries")
		return
	}
	if cap(z.Entries) >= int(zb0002) {
		z.Entries = (z.Entries)[:zb0002]
	} else {
		z.Entries = make([]EntryExt, zb0002)
	}
	for za0001 := range z.Entries {
		bts, err = z.Entries[za0001].UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "Entries", za0001)
			return
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Options = nil
	} else {
		if z.Options == nil {
			z.Options = new(MessageOptions)
		}
		bts, err = z.Options.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "Options")
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ForwardMessage) Msgsize() (s int) {
	s = 1 + msgp.StringPrefixSize + len(z.Tag) + msgp.ArrayHeaderSize
	for za0001 := range z.Entries {
		s += z.Entries[za0001].Msgsize()
	}
	if z.Options == nil {
		s += msgp.NilSize
	} else {
		s += z.Options.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Message) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	z.Tag, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Tag")
		return
	}
	z.Timestamp, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err, "Record")
		return
	}
	if z.Record == nil {
		z.Record = make(map[string]string, zb0002)
	} else if len(z.Record) > 0 {
		for key := range z.Record {
			delete(z.Record, key)
		}
	}
	for zb0002 > 0 {
		zb0002--
		var za0001 string
		var za0002 string
		za0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, "Record")
			return
		}
		za0002, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, "Record", za0001)
			return
		}
		z.Record[za0001] = za0002
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Options")
			return
		}
		z.Options = nil
	} else {
		if z.Options == nil {
			z.Options = new(MessageOptions)
		}
		err = z.Options.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "Options")
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Message) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 4
	err = en.Append(0x94)
	if err != nil {
		return
	}
	err = en.WriteString(z.Tag)
	if err != nil {
		err = msgp.WrapError(err, "Tag")
		return
	}
	err = en.WriteInt64(z.Timestamp)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Record)))
	if err != nil {
		err = msgp.WrapError(err, "Record")
		return
	}
	for za0001, za0002 := range z.Record {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Record")
			return
		}
		err = en.WriteString(za0002)
		if err != nil {
			err = msgp.WrapError(err, "Record", za0001)
			return
		}
	}
	if z.Options == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Options.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Options")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Message) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 4
	o = append(o, 0x94)
	o = msgp.AppendString(o, z.Tag)
	o = msgp.AppendInt64(o, z.Timestamp)
	o = msgp.AppendMapHeader(o, uint32(len(z.Record)))
	for za0001, za0002 := range z.Record {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendString(o, za0002)
	}
	if z.Options == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Options.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Options")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Message) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	z.Tag, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Tag")
		return
	}
	z.Timestamp, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Record")
		return
	}
	if z.Record == nil {
		z.Record = make(map[string]string, zb0002)
	} else if len(z.Record) > 0 {
		for key := range z.Record {
			delete(z.Record, key)
		}
	}
	for zb0002 > 0 {
		var za0001 string
		var za0002 string
		zb0002--
		za0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "Record")
			return
		}
		za0002, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "Record", za0001)
			return
		}
		z.Record[za0001] = za0002
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Options = nil
	} else {
		if z.Options == nil {
			z.Options = new(MessageOptions)
		}
		bts, err = z.Options.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "Options")
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Message) Msgsize() (s int) {
	s = 1 + msgp.StringPrefixSize + len(z.Tag) + msgp.Int64Size + msgp.MapHeaderSize
	if z.Record != nil {
		for za0001, za0002 := range z.Record {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.StringPrefixSize + len(za0002)
		}
	}
	if z.Options == nil {
		s += msgp.NilSize
	} else {
		s += z.Options.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageExt) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	z.Tag, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Tag")
		return
	}
	err = dc.ReadExtension(&z.Timestamp)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err, "Record")
		return
	}
	if z.Record == nil {
		z.Record = make(map[string]string, zb0002)
	} else if len(z.Record) > 0 {
		for key := range z.Record {
			delete(z.Record, key)
		}
	}
	for zb0002 > 0 {
		zb0002--
		var za0001 string
		var za0002 string
		za0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, "Record")
			return
		}
		za0002, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, "Record", za0001)
			return
		}
		z.Record[za0001] = za0002
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Options")
			return
		}
		z.Options = nil
	} else {
		if z.Options == nil {
			z.Options = new(MessageOptions)
		}
		err = z.Options.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "Options")
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageExt) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 4
	err = en.Append(0x94)
	if err != nil {
		return
	}
	err = en.WriteString(z.Tag)
	if err != nil {
		err = msgp.WrapError(err, "Tag")
		return
	}
	err = en.WriteExtension(&z.Timestamp)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Record)))
	if err != nil {
		err = msgp.WrapError(err, "Record")
		return
	}
	for za0001, za0002 := range z.Record {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Record")
			return
		}
		err = en.WriteString(za0002)
		if err != nil {
			err = msgp.WrapError(err, "Record", za0001)
			return
		}
	}
	if z.Options == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Options.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Options")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageExt) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 4
	o = append(o, 0x94)
	o = msgp.AppendString(o, z.Tag)
	o, err = msgp.AppendExtension(o, &z.Timestamp)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	o = msgp.AppendMapHeader(o, uint32(len(z.Record)))
	for za0001, za0002 := range z.Record {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendString(o, za0002)
	}
	if z.Options == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Options.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Options")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageExt) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	z.Tag, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Tag")
		return
	}
	bts, err = msgp.ReadExtensionBytes(bts, &z.Timestamp)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Record")
		return
	}
	if z.Record == nil {
		z.Record = make(map[string]string, zb0002)
	} else if len(z.Record) > 0 {
		for key := range z.Record {
			delete(z.Record, key)
		}
	}
	for zb0002 > 0 {
		var za0001 string
		var za0002 string
		zb0002--
		za0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "Record")
			return
		}
		za0002, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "Record", za0001)
			return
		}
		z.Record[za0001] = za0002
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Options = nil
	} else {
		if z.Options == nil {
			z.Options = new(MessageOptions)
		}
		bts, err = z.Options.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "Options")
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageExt) Msgsize() (s int) {
	s = 1 + msgp.StringPrefixSize + len(z.Tag) + msgp.ExtensionPrefixSize + z.Timestamp.Len() + msgp.MapHeaderSize
	if z.Record != nil {
		for za0001, za0002 := range z.Record {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.StringPrefixSize + len(za0002)
		}
	}
	if z.Options == nil {
		s += msgp.NilSize
	} else {
		s += z.Options.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageOptions) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "size":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Size")
					return
				}
				z.Size = nil
			} else {
				if z.Size == nil {
					z.Size = new(int)
				}
				*z.Size, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Size")
					return
				}
			}
		case "chunk":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Chunk")
					return
				}
				z.Chunk = nil
			} else {
				if z.Chunk == nil {
					z.Chunk = new(string)
				}
				*z.Chunk, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Chunk")
					return
				}
			}
		case "compressed":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Compressed")
					return
				}
				z.Compressed = nil
			} else {
				if z.Compressed == nil {
					z.Compressed = new(string)
				}
				*z.Compressed, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Compressed")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageOptions) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "size"
	err = en.Append(0x83, 0xa4, 0x73, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	if z.Size == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteInt(*z.Size)
		if err != nil {
			err = msgp.WrapError(err, "Size")
			return
		}
	}
	// write "chunk"
	err = en.Append(0xa5, 0x63, 0x68, 0x75, 0x6e, 0x6b)
	if err != nil {
		return
	}
	if z.Chunk == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.Chunk)
		if err != nil {
			err = msgp.WrapError(err, "Chunk")
			return
		}
	}
	// write "compressed"
	err = en.Append(0xaa, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64)
	if err != nil {
		return
	}
	if z.Compressed == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.Compressed)
		if err != nil {
			err = msgp.WrapError(err, "Compressed")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageOptions) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "size"
	o = append(o, 0x83, 0xa4, 0x73, 0x69, 0x7a, 0x65)
	if z.Size == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendInt(o, *z.Size)
	}
	// string "chunk"
	o = append(o, 0xa5, 0x63, 0x68, 0x75, 0x6e, 0x6b)
	if z.Chunk == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.Chunk)
	}
	// string "compressed"
	o = append(o, 0xaa, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64)
	if z.Compressed == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.Compressed)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageOptions) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "size":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Size = nil
			} else {
				if z.Size == nil {
					z.Size = new(int)
				}
				*z.Size, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Size")
					return
				}
			}
		case "chunk":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Chunk = nil
			} else {
				if z.Chunk == nil {
					z.Chunk = new(string)
				}
				*z.Chunk, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Chunk")
					return
				}
			}
		case "compressed":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Compressed = nil
			} else {
				if z.Compressed == nil {
					z.Compressed = new(string)
				}
				*z.Compressed, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Compressed")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageOptions) Msgsize() (s int) {
	s = 1 + 5
	if z.Size == nil {
		s += msgp.NilSize
	} else {
		s += msgp.IntSize
	}
	s += 6
	if z.Chunk == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.Chunk)
	}
	s += 11
	if z.Compressed == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.Compressed)
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PackedForwardMessage) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	z.Tag, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Tag")
		return
	}
	z.EventStream, err = dc.ReadBytes(z.EventStream)
	if err != nil {
		err = msgp.WrapError(err, "EventStream")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Options")
			return
		}
		z.Options = nil
	} else {
		if z.Options == nil {
			z.Options = new(MessageOptions)
		}
		err = z.Options.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "Options")
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PackedForwardMessage) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 3
	err = en.Append(0x93)
	if err != nil {
		return
	}
	err = en.WriteString(z.Tag)
	if err != nil {
		err = msgp.WrapError(err, "Tag")
		return
	}
	err = en.WriteBytes(z.EventStream)
	if err != nil {
		err = msgp.WrapError(err, "EventStream")
		return
	}
	if z.Options == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Options.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Options")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PackedForwardMessage) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 3
	o = append(o, 0x93)
	o = msgp.AppendString(o, z.Tag)
	o = msgp.AppendBytes(o, z.EventStream)
	if z.Options == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Options.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Options")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PackedForwardMessage) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	z.Tag, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Tag")
		return
	}
	z.EventStream, bts, err = msgp.ReadBytesBytes(bts, z.EventStream)
	if err != nil {
		err = msgp.WrapError(err, "EventStream")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Options = nil
	} else {
		if z.Options == nil {
			z.Options = new(MessageOptions)
		}
		bts, err = z.Options.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "Options")
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PackedForwardMessage) Msgsize() (s int) {
	s = 1 + msgp.StringPrefixSize + len(z.Tag) + msgp.BytesPrefixSize + len(z.EventStream)
	if z.Options == nil {
		s += msgp.NilSize
	} else {
		s += z.Options.Msgsize()
	}
	return
}
